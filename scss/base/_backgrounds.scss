// ===================================================================================
// ██████   █████   ██████ ██   ██  ██████  ██████   ██████  ██    ██ ███    ██ ██████
// ██   ██ ██   ██ ██      ██  ██  ██       ██   ██ ██    ██ ██    ██ ████   ██ ██   ██
// ██████  ███████ ██      █████   ██   ███ ██████  ██    ██ ██    ██ ██ ██  ██ ██   ██
// ██   ██ ██   ██ ██      ██  ██  ██    ██ ██   ██ ██    ██ ██    ██ ██  ██ ██ ██   ██
// ██████  ██   ██  ██████ ██   ██  ██████  ██   ██  ██████   ██████  ██   ████ ██████
//  ██████  ██████  ██       ██████  ██████  ███████
// ██      ██    ██ ██      ██    ██ ██   ██ ██
// ██      ██    ██ ██      ██    ██ ██████  ███████
// ██      ██    ██ ██      ██    ██ ██   ██      ██
//  ██████  ██████  ███████  ██████  ██   ██ ███████
// ===================================================================================
$breakpoint-classes: (small);
@each $color-name, $color in $background-palette {
  @each $size in $breakpoint-classes {
    @include breakpoint($size) {
      @if $size != $-zf-zero-breakpoint {
        .#{$size}-bg-#{$color-name} {
          background-color: #{$color};
          color: contrast-checker($color);

          & :is(h1, h2, h3, p, ul, li, ol, em, strong, [src$=".jpg"] ):not(.menu) {
            color: inherit;
          }

          & :is(h4, h5, h6):not(.menu) {
            color: heading-contrast-checker($color);
          }

          & a:not(.button),
          a:link:not(.button) {
            color: link-contrast-checker($color);

            &:hover {
              color: link-contrast-checker-hover($color);
            }
          }

          .button.hollow {
            color: link-contrast-checker($color);
            border-color: link-contrast-checker($color);

            &:hover {
              color: link-contrast-checker-hover($color);
              border-color: link-contrast-checker-hover($color);
            }
          }
        }
      } @else {
        .bg-#{$color-name} {
          background-color: #{$color};
          color: contrast-checker($color);

          & :is(h1, h2, h3, p, ul, li, ol, em, strong):not(.menu) {
            color: inherit;
          }

          & :is(h4, h5, h6):not(.menu) {
            color: heading-contrast-checker($color);
          }

          & a:not(.button),
          a:link:not(.button) {
            color: link-contrast-checker($color);

            &:hover {
              color: link-contrast-checker-hover($color);
            }
          }

          .button.hollow {
            color: link-contrast-checker($color);
            border-color: link-contrast-checker($color);

            &:hover {
              color: link-contrast-checker-hover($color);
              border-color: link-contrast-checker-hover($color);
            }
          }
        }
      }
    }
  }
}

.bg-transparent {
  background: transparent !important;
}

.bg-none {
  background: none !important;
}

/* ----  End of BACKGROUND COLOR -------------------------------- */

// ======================================================================
// ██████   █████   ██████ ██   ██  ██████  ██████   ██████  ██    ██ ███    ██ ██████
// ██   ██ ██   ██ ██      ██  ██  ██       ██   ██ ██    ██ ██    ██ ████   ██ ██   ██
// ██████  ███████ ██      █████   ██   ███ ██████  ██    ██ ██    ██ ██ ██  ██ ██   ██
// ██   ██ ██   ██ ██      ██  ██  ██    ██ ██   ██ ██    ██ ██    ██ ██  ██ ██ ██   ██
// ██████  ██   ██  ██████ ██   ██  ██████  ██   ██  ██████   ██████  ██   ████ ██████
//  ██████  ██████   █████   ██████ ██ ████████ ██    ██
// ██    ██ ██   ██ ██   ██ ██      ██    ██     ██  ██
// ██    ██ ██████  ███████ ██      ██    ██      ████
// ██    ██ ██      ██   ██ ██      ██    ██       ██
//  ██████  ██      ██   ██  ██████ ██    ██       ██
// ======================================================================
// $bg-opacitites: 10;
// $bg-opacitites-colors: (
//     "black": $black,
//     "white": $white,
// );
//
// @for $i from 1 through $bg-opacitites {
//     @each $color-name, $color in $background-palette {
//         .bg-#{$color-name}-opacity-#{$i*10} {
//             // opacity: unquote(".") + $i*10;
//             background-color: transparentize($color, $i/10);
//             // background-color: transparentize($color, ($i*0.10));
//         }
//     }
// }
// -----  End of BACKGROUND OPACITY  ----------

/*====================================================================================

██████   █████   ██████ ██   ██  ██████  ██████   ██████  ██    ██ ███    ██ ██████
██   ██ ██   ██ ██      ██  ██  ██       ██   ██ ██    ██ ██    ██ ████   ██ ██   ██
██████  ███████ ██      █████   ██   ███ ██████  ██    ██ ██    ██ ██ ██  ██ ██   ██
██   ██ ██   ██ ██      ██  ██  ██    ██ ██   ██ ██    ██ ██    ██ ██  ██ ██ ██   ██
██████  ██   ██  ██████ ██   ██  ██████  ██   ██  ██████   ██████  ██   ████ ██████
████████ ██ ███    ██ ████████ ███████
   ██    ██ ████   ██    ██    ██
   ██    ██ ██ ██  ██    ██    ███████
   ██    ██ ██  ██ ██    ██         ██
   ██    ██ ██   ████    ██    ███████

====================================================================================*/
// $background-tints: 5;
// @for $i from 1 through $background-tints {
//     @each $color-name, $color in $background-palette {
//         .bg-#{$color-name}-tint#{$i} {
//             background-color: darken($color, percentage($i / 12));
//         }
//     }
// }
// -----  End of BACKGROUND TINTS  ----------

/* ====================================================================================

██████   █████   ██████ ██   ██  ██████  ██████   ██████  ██    ██ ███    ██ ██████
██   ██ ██   ██ ██      ██  ██  ██       ██   ██ ██    ██ ██    ██ ████   ██ ██   ██
██████  ███████ ██      █████   ██   ███ ██████  ██    ██ ██    ██ ██ ██  ██ ██   ██
██   ██ ██   ██ ██      ██  ██  ██    ██ ██   ██ ██    ██ ██    ██ ██  ██ ██ ██   ██
██████  ██   ██  ██████ ██   ██  ██████  ██   ██  ██████   ██████  ██   ████ ██████
██████   ██████  ███████ ██ ████████ ██  ██████  ███    ██ ███████
██   ██ ██    ██ ██      ██    ██    ██ ██    ██ ████   ██ ██
██████  ██    ██ ███████ ██    ██    ██ ██    ██ ██ ██  ██ ███████
██      ██    ██      ██ ██    ██    ██ ██    ██ ██  ██ ██      ██
██       ██████  ███████ ██    ██    ██  ██████  ██   ████ ███████

==================================================================================== */
$bg-pos: (
  "left": "left",
  "right": "right",
  "top": "top",
  "bottom": "bottom",
  "center": "center",
  "top-left": "top left",
  "top-center": "top center",
  "top-right": "top right",
  "bottom-left": "bottom left",
  "bottom-center": "bottom center",
  "bottom-right": "bottom right",
  "center-left": "center left",
  "center-center": "center center",
  "center-right": "center right",
);
@each $size in $breakpoint-classes {
  @include breakpoint($size) {
    @each $side, $side-name in $bg-pos {
      @if $size != $-zf-zero-breakpoint {
        .#{$size}-bg-pos-#{$side} {
          background-position: #{$side-name};
        }
      } @else {
        .bg-pos-#{$side} {
          background-position: #{$side-name};
        }
      }
    }
  }
}

// -----  End of BACKGROUND POSITIONS  ----------

// ====================================================================================
// ██████   █████   ██████ ██   ██  ██████  ██████   ██████  ██    ██ ███    ██ ██████
// ██   ██ ██   ██ ██      ██  ██  ██       ██   ██ ██    ██ ██    ██ ████   ██ ██   ██
// ██████  ███████ ██      █████   ██   ███ ██████  ██    ██ ██    ██ ██ ██  ██ ██   ██
// ██   ██ ██   ██ ██      ██  ██  ██    ██ ██   ██ ██    ██ ██    ██ ██  ██ ██ ██   ██
// ██████  ██   ██  ██████ ██   ██  ██████  ██   ██  ██████   ██████  ██   ████ ██████
// ███████ ██ ███████ ███████
// ██      ██    ███  ██
// ███████ ██   ███   █████
//      ██ ██  ███    ██
// ███████ ██ ███████ ███████
// ====================================================================================

$bg-size: (
  "unset": "unset",
  "cover": "cover",
  "contain": "contain",
);
@each $size in $breakpoint-classes {
  @include breakpoint($size) {
    @each $size-option, $bg-size-option in $bg-size {
      @if $size != $-zf-zero-breakpoint {
        .#{$size}-bg-size-#{$size-option} {
          background-size: #{$bg-size-option};
          background-repeat: no-repeat;
        }
      } @else {
        .bg-size-#{$size-option} {
          background-size: #{$bg-size-option};
          background-repeat: no-repeat;
        }
      }
    }
  }
}

// -----  End of BACKGROUND SIZE  ----------

// ====================================================================================
// ██████   █████   ██████ ██   ██  ██████  ██████   ██████  ██    ██ ███    ██ ██████
// ██   ██ ██   ██ ██      ██  ██  ██       ██   ██ ██    ██ ██    ██ ████   ██ ██   ██
// ██████  ███████ ██      █████   ██   ███ ██████  ██    ██ ██    ██ ██ ██  ██ ██   ██
// ██   ██ ██   ██ ██      ██  ██  ██    ██ ██   ██ ██    ██ ██    ██ ██  ██ ██ ██   ██
// ██████  ██   ██  ██████ ██   ██  ██████  ██   ██  ██████   ██████  ██   ████ ██████
//  █████  ████████ ████████  █████   ██████ ██   ██ ███    ███ ███████ ███    ██ ████████
// ██   ██    ██       ██    ██   ██ ██      ██   ██ ████  ████ ██      ████   ██    ██
// ███████    ██       ██    ███████ ██      ███████ ██ ████ ██ █████   ██ ██  ██    ██
// ██   ██    ██       ██    ██   ██ ██      ██   ██ ██  ██  ██ ██      ██  ██ ██    ██
// ██   ██    ██       ██    ██   ██  ██████ ██   ██ ██      ██ ███████ ██   ████    ██
// ====================================================================================
.bg-attach-fixed {
  @include breakpoint(xlarge) {
    background-attachment: fixed;
  }
}
// -----  End of BACKGROUND ATTACHMENT  ----------


// For reference
// .text-color-name .absolute - for image absolute
// .text-color-name .grid-x *:not(a, a:link, i, span,button) - for data-bg,data-interchange
// .absolute ~ .relative.text-#{$color-name}- for curtain js
  // .absolute ~ .relative.text-#{$color-name} *:not(a, a:link, i, span,button) - for curtain js
// @each $color-name, $color in $background-palette {
// [style*="url"] {
//       background-color: $primary;
//       color: contrast-checker($color);
//       // color: red;
// }
// }

// @each $color-name, $color in $background-palette {
// .text-#{$color-name} .absolute,
//   .text-#{$color-name} .grid-x *:not(a, a:link, i, span,button),
//   .absolute ~ .relative.text-#{$color-name},
//   .absolute ~ .relative.text-#{$color-name} *:not(a, a:link, i, span,button){
//     color: $color;
//     & a:link:not(.button),& a:not(.button){
//       color: bg-image-link-contrast-checker($color) !important;

//       &:hover {
//         color: bg-image-link-contrast-checker-hover($color)!important;
//       }
//     }
//   }
// }


// .text-white wrapper containing any bg-white children class

// .text-white{
//   .bg-white{
//     & :is(h1,h2,h3, p, ul, li, ol, em, strong):not(.menu){
//       color: $primary !important;
//     }
//     & :is(h4,h5,h6):not(.menu){
//       color: heading-contrast-checker($accent2-dark) !important;
//     }
//     & a:link:not(.button),& a:not(.button){
//       color: bg-image-link-contrast-checker($white) !important;

//       &:hover {
//         color: bg-image-link-contrast-checker-hover($white)!important;
//       }
//     }
//   }
// }

// // solution 2 ends